{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shaqnewell/Documents/GA-table-new/Property-Search/frontend/src/Components/Pagination/pagination.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport './pagination.scss'; // NOTE: Like userSearch.js, I tried to write this in TypeScript but kept running \n// into and issue with defining the type for the setPageArray() function\n\nconst Pagination = ({\n  propertyData,\n  setPageArray\n}) => {\n  _s();\n\n  const [selectedPage, setSelectedPage] = useState(1);\n  const pageSize = 10;\n  const pageLimit = Math.ceil(propertyData.length / pageSize); // NOTE: This felt clunky to write but I needed something to generate a list of\n  // page numbers for the page selection\n\n  const pageCounter = () => {\n    let arr = [];\n\n    for (let pageNumber = 1; pageNumber < pageLimit + 1; pageNumber++) {\n      arr.push(pageNumber);\n    }\n\n    return arr;\n  };\n\n  let pageArray = pageCounter();\n\n  const paginate = pageNumber => {\n    return propertyData.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);\n  };\n\n  const changePage = increment => {\n    setSelectedPage(selectedPage + increment);\n  };\n\n  const selectPage = event => {\n    setSelectedPage(parseInt(event.target.value));\n  }; // NOTE: Needed something to reliably update the list of pages\n  // These useEffects() solved a number of bugs I was facing, and made pagination much more robust\n\n\n  useEffect(() => {\n    setPageArray(paginate(selectedPage));\n  }, [selectedPage]);\n  useEffect(() => {\n    changePage(1 - selectedPage);\n    setPageArray(paginate(selectedPage));\n  }, [propertyData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pageButtons\",\n    \"data-testid\": \"page-buttons\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"pageButtons__previous\",\n      variant: \"dark\",\n      \"data-testid\": \"previous-page-button\",\n      disabled: selectedPage === 1,\n      onClick: () => {\n        changePage(-1);\n      },\n      children: \"Previous page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"pageButtons__indicator\",\n      \"data-testid\": \"page-number\",\n      value: selectedPage,\n      onChange: selectPage,\n      children: pageArray.map(pageNumber => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: pageNumber,\n        children: pageNumber\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"pageButtons__next\",\n      variant: \"dark\",\n      \"data-testid\": \"next-page-button\",\n      disabled: selectedPage === pageLimit,\n      onClick: () => {\n        changePage(1);\n      },\n      children: \"Next page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Pagination, \"9gEfFBhwrhXjUbE0Bhoqszg1eEg=\");\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["/Users/shaqnewell/Documents/GA-table-new/Property-Search/frontend/src/Components/Pagination/pagination.js"],"names":["useEffect","useState","Button","Pagination","propertyData","setPageArray","selectedPage","setSelectedPage","pageSize","pageLimit","Math","ceil","length","pageCounter","arr","pageNumber","push","pageArray","paginate","slice","changePage","increment","selectPage","event","parseInt","target","value","map"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport './pagination.scss'\n\n// NOTE: Like userSearch.js, I tried to write this in TypeScript but kept running \n// into and issue with defining the type for the setPageArray() function\n\nconst Pagination = ({ propertyData, setPageArray }) => {\n  const [selectedPage, setSelectedPage] = useState(1);\n  const pageSize = 10;\n  const pageLimit = Math.ceil(propertyData.length / pageSize);\n\n  // NOTE: This felt clunky to write but I needed something to generate a list of\n  // page numbers for the page selection\n  const pageCounter = () => {\n    let arr = [];\n    for (let pageNumber = 1; pageNumber < pageLimit + 1; pageNumber++) {\n      arr.push(pageNumber);\n    }\n    return arr;\n  };\n  let pageArray = pageCounter();\n\n  const paginate = (pageNumber) => {\n    return propertyData.slice(\n      (pageNumber - 1) * pageSize,\n      pageNumber * pageSize\n    );\n  };\n\n  const changePage = (increment) => {\n    setSelectedPage(selectedPage + increment);\n  };\n  const selectPage = (event) => {\n    setSelectedPage(parseInt(event.target.value));\n  };\n\n// NOTE: Needed something to reliably update the list of pages\n// These useEffects() solved a number of bugs I was facing, and made pagination much more robust\n  useEffect(() => {\n    setPageArray(paginate(selectedPage));\n  }, [selectedPage]);\n\n  useEffect(() => {\n    changePage(1 - selectedPage);\n    setPageArray(paginate(selectedPage));\n  }, [propertyData]);\n\n  return (\n    <div className=\"pageButtons\" data-testid=\"page-buttons\">\n      <Button\n        className=\"pageButtons__previous\"\n        variant=\"dark\"\n        data-testid=\"previous-page-button\"\n        disabled={selectedPage === 1}\n        onClick={() => {\n          changePage(-1);\n        }}\n      >\n        Previous page\n      </Button>\n      <select\n        className=\"pageButtons__indicator\"\n        data-testid=\"page-number\"\n        value={selectedPage}\n        onChange={selectPage}\n      >\n        {pageArray.map((pageNumber) => (\n          <option key={pageNumber} value={pageNumber}>\n            {pageNumber}\n          </option>\n        ))}\n      </select>\n      <Button\n        className=\"pageButtons__next\"\n        variant=\"dark\"\n        data-testid=\"next-page-button\"\n        disabled={selectedPage === pageLimit}\n        onClick={() => {\n          changePage(1);\n        }}\n      >\n        Next page\n      </Button>\n    </div>\n  );\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}