{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shaqnewell/Documents/GA-table-new/Property-Search/frontend/src/Components/UserSearch/userSearchjs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport fetchData from \"../../utils/fetchData\";\nimport './userSearch.scss';\n\nconst UserSearch = ({\n  setPropertyData\n}) => {\n  _s();\n\n  const [textInput, setTextinput] = useState(\"\");\n  const [searchType, setSearchType] = useState(\"lrPropertyOutcode\");\n  const [emptyData, setEmptyData] = useState(false);\n\n  const handleTypeChange = event => {\n    setSearchType(event.target.value);\n  };\n\n  const handleSearchtermChange = event => {\n    setTextinput(event.target.value.trim());\n  };\n\n  const handleKeyDown = async event => {\n    if (event.key === \"Enter\") {\n      const data = await fetchData(textInput.toUpperCase(), searchType);\n\n      if (!data || !data.length) {\n        setEmptyData(true);\n      } else {\n        setEmptyData(false);\n        setPropertyData(data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"input-container\",\n    className: \"inputContainer\",\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"inputContainer__textInput\",\n        \"data-testid\": \"search-text-input\",\n        type: \"text\",\n        placeholder: \"Press enter to search\",\n        value: textInput,\n        onChange: handleSearchtermChange,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"inputContainer__optionSelect\",\n        \"data-testid\": \"search-type-input\",\n        value: searchType,\n        onChange: handleTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"lrPropertyOutcode\",\n          children: \"Outcode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"lrPropertyStreet\",\n          children: \"Street\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"lrPropertyId\",\n          children: \"ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), emptyData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"empty-data-message\",\n      className: \"inputContainer__emptyData\",\n      children: \" No results found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserSearch, \"x07uW1UJC29O+mKBtE4J+kpWtmo=\");\n\n_c = UserSearch;\nexport default UserSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSearch\");","map":{"version":3,"sources":["/Users/shaqnewell/Documents/GA-table-new/Property-Search/frontend/src/Components/UserSearch/userSearchjs.js"],"names":["React","useState","fetchData","UserSearch","setPropertyData","textInput","setTextinput","searchType","setSearchType","emptyData","setEmptyData","handleTypeChange","event","target","value","handleSearchtermChange","trim","handleKeyDown","key","data","toUpperCase","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,mBAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyB;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,mBAAD,CAA5C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMU,gBAAgB,GAAIC,KAAD,IAAW;AAClCJ,IAAAA,aAAa,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAGA,QAAMC,sBAAsB,GAAIH,KAAD,IAAW;AACxCN,IAAAA,YAAY,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBE,IAAnB,EAAD,CAAZ;AACD,GAFD;;AAGA,QAAMC,aAAa,GAAG,MAAOL,KAAP,IAAiB;AACrC,QAAIA,KAAK,CAACM,GAAN,KAAc,OAAlB,EAA2B;AACzB,YAAMC,IAAI,GAAG,MAAMjB,SAAS,CAACG,SAAS,CAACe,WAAV,EAAD,EAA0Bb,UAA1B,CAA5B;;AACA,UAAI,CAACY,IAAD,IAAS,CAACA,IAAI,CAACE,MAAnB,EAA2B;AACzBX,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAN,QAAAA,eAAe,CAACe,IAAD,CAAf;AACD;AACF;AACF,GAVD;;AAYA,sBACE;AAAK,mBAAY,iBAAjB;AAAmC,IAAA,SAAS,EAAC,gBAA7C;AAAA,4BACE;AAAA,8BACE;AACE,QAAA,SAAS,EAAC,2BADZ;AAEE,uBAAY,mBAFd;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC,uBAJd;AAKE,QAAA,KAAK,EAAEd,SALT;AAME,QAAA,QAAQ,EAAEU,sBANZ;AAOE,QAAA,SAAS,EAAEE;AAPb;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AACE,QAAA,SAAS,EAAC,8BADZ;AAEE,uBAAY,mBAFd;AAGE,QAAA,KAAK,EAAEV,UAHT;AAIE,QAAA,QAAQ,EAAEI,gBAJZ;AAAA,gCAME;AAAQ,UAAA,KAAK,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAQ,UAAA,KAAK,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE;AAAQ,UAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA,oBADF,EAyBGF,SAAS,gBAAG;AAAK,qBAAY,oBAAjB;AAAsC,MAAA,SAAS,EAAC,2BAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAAyG,IAzBrH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CApDD;;GAAMN,U;;KAAAA,U;AAsDN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport fetchData from \"../../utils/fetchData\";\nimport './userSearch.scss'\n\nconst UserSearch = ({ setPropertyData }) => {\n  const [textInput, setTextinput] = useState(\"\");\n  const [searchType, setSearchType] = useState(\"lrPropertyOutcode\");\n  const [emptyData, setEmptyData] = useState(false);\n\n  const handleTypeChange = (event) => {\n    setSearchType(event.target.value);\n  };\n  const handleSearchtermChange = (event) => {\n    setTextinput(event.target.value.trim());\n  };\n  const handleKeyDown = async (event) => {\n    if (event.key === \"Enter\") {\n      const data = await fetchData(textInput.toUpperCase(), searchType);\n      if (!data || !data.length) {\n        setEmptyData(true);\n      } else {\n        setEmptyData(false);\n        setPropertyData(data);\n      }\n    }\n  };\n\n  return (\n    <div data-testid=\"input-container\" className=\"inputContainer\">\n      <>\n        <input\n          className=\"inputContainer__textInput\"\n          data-testid=\"search-text-input\"\n          type=\"text\"\n          placeholder=\"Press enter to search\"\n          value={textInput}\n          onChange={handleSearchtermChange}\n          onKeyDown={handleKeyDown}\n        />\n        {/* I opted to add a dropdown for easier navigation through a varying number of pages \n            The list of options sadly couldn't be styled or shortened but I think it offered the best user experience*/}\n        <select\n          className=\"inputContainer__optionSelect\"\n          data-testid=\"search-type-input\"\n          value={searchType}\n          onChange={handleTypeChange}\n        >\n          <option value=\"lrPropertyOutcode\">Outcode</option>\n          <option value=\"lrPropertyStreet\">Street</option>\n          <option value=\"lrPropertyId\">ID</option>\n        </select>\n      </>\n      {/* NOTE: I would  have liked to use a bootstrap warning but it wasn't behaving as expected so I put together a quick error message*/}\n      {emptyData ? <div data-testid=\"empty-data-message\" className=\"inputContainer__emptyData\"> No results found</div> : null}\n    </div>\n  );\n};\n\nexport default UserSearch;\n"]},"metadata":{},"sourceType":"module"}